"use strict";(self.webpackChunkserenity_users_guide=self.webpackChunkserenity_users_guide||[]).push([[506],{4117:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var s=n(7462),i=n(3366),r=(n(7294),n(3905)),a=["components"],o={id:"step_libraries",title:"Step Libraries",sidebar_position:4},l="Serenity Step Libraries",u={unversionedId:"guide/step_libraries",id:"guide/step_libraries",isDocsHomePage:!1,title:"Step Libraries",description:"In Serenity, tests are broken down into reusable steps. An important principle behind Serenity is the idea that it is easier to maintain a test that uses several layers of abstraction to hide the complexity behind different parts of a test.",source:"@site/docs/guide/steps.md",sourceDirName:"guide",slug:"/guide/step_libraries",permalink:"/documentation/docs/guide/step_libraries",editUrl:"https://github.com/serenity-bdd/documentation/docs/guide/steps.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"step_libraries",title:"Step Libraries",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Using Maven with Serenity",permalink:"/documentation/docs/guide/maven"},next:{title:"Serenity Page Elements",permalink:"/documentation/docs/guide/page_elements"}},p=[{value:"Breaking down tests into steps",id:"breaking-down-tests-into-steps",children:[]},{value:"Implementing Step Libraries",id:"implementing-step-libraries",children:[]}],d={toc:p};function c(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,s.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"serenity-step-libraries"},"Serenity Step Libraries"),(0,r.kt)("p",null,"In Serenity, tests are broken down into reusable steps. An important principle behind Serenity is the idea that it is easier to maintain a test that uses several layers of abstraction to hide the complexity behind different parts of a test."),(0,r.kt)("p",null,"In an automated acceptance test, test steps represent the level of abstraction between the code that interacts with your application (for example, Page Component Objects in an automated web test, which model parts of the user interface, or API endpoints for web services you need to interact with) and higher-level stories (sequences of more business-focused actions that illustrate how a given user story has been implemented). If your automated test is not UI-oriented (for example, if it calls a web service), steps orchestrate other more technical components such as REST clients. Steps can contain other steps, and are included in the Serenity reports. Whenever a UI step is executed, a screenshot is stored and displayed in the report."),(0,r.kt)("h2",{id:"breaking-down-tests-into-steps"},"Breaking down tests into steps"),(0,r.kt)("p",null,"Suppose we are testing a Frequent Flyer programme, and need to illustrate the following business rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Members should start with Bronze status"),(0,r.kt)("li",{parentName:"ul"},"Members should earn Silver status after flying 10,000 km.")),(0,r.kt)("p",null,"Each of these can be broken down further into business tasks and verifications. For example, the first rule could be broken into two steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a new Frequent Flyer member"),(0,r.kt)("li",{parentName:"ul"},"Check that the member has a status of Bronze")),(0,r.kt)("p",null,"And the second can be broken into three steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a new Frequent Flyer member"),(0,r.kt)("li",{parentName:"ul"},"Make the member fly 10000 km"),(0,r.kt)("li",{parentName:"ul"},"Check that the member has a status of Silver")),(0,r.kt)("p",null,"We could express these tests using Serenity in JUnit as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package flyer;\n\nimport net.serenitybdd.junit.runners.SerenityRunner;\nimport net.thucydides.core.annotations.Steps;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport flyer.steps.TravellerEarningStatusPoints;\n\nimport static flyer.Status.Bronze;\nimport static flyer.Status.Silver;\n\n/// [classbody]\n@ExtendWith(SerenityJUnit5Extension.class)\npublic class WhenEarningFrequentFlyerStatus {\n\n    @Steps\n    TravellerEarningStatusPoints tracy;\n\n    @Test\n    public void members_should_start_with_Bronze_status() {\n        // GIVEN\n        tracy.joins_the_frequent_flyer_program();\n\n        // THEN\n        tracy.should_have_a_status_of(Bronze);\n    }\n\n    @Test\n    public void earn_silver_after_10000_kilometers() {\n        // GIVEN\n        tracy.joins_the_frequent_flyer_program();\n\n        // WHEN\n        tracy.flies(10000);\n\n        // THEN\n        tracy.should_have_a_status_of(Silver);\n    }\n}\n")),(0,r.kt)("p",null,"Notice how the second test reuses step methods used in the first to perform a slightly different test. This is a typical example of the way we reuse steps in similar tests, in order to avoid duplicated code and make the code easier to maintain."),(0,r.kt)("h2",{id:"implementing-step-libraries"},"Implementing Step Libraries"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TravellerEarningStatusPoints")," class is what we call a step library. We use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Steps")," class as shown above to indicate a step library in our test code: this annotation tells Serenity to instantiate and instrument this field, so that methods you call in this library also appear in the test reports, just like in the one you can see here:"),(0,r.kt)("p",null,"earn silver after 10000 km\nStep libraries contain the business tasks or actions that a user performs during a test. There are many ways to organise your step libraries, but a convenient way is to group methods in slices of business behaviour for a given type of user. In this case a traveller who is earning status points."),(0,r.kt)("p",null,"Notice that it was not necessary to explicitly instantiate the Steps class TravellerEarningStatusPoints. When you annotated a member variable of this class with the @Steps annotation, Serenity BDD will automatically instantiate it for you."),(0,r.kt)("p",null,"You should never create instances of step libraries using the new keyword, as Serenity will not be able to instrument the step library correctly, and the methods called will not appear in the reports."),(0,r.kt)("p",null,"Step methods are annotated with the @Step annotation:"))}c.isMDXComponent=!0}}]);